// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "forge-std/Test.sol";
import "../src/DoSVulnerable.sol";
import "../src/MaliciousRecipient.sol";

contract DoSVulnerabilityTest is Test {
    DoSVulnerable public dosVulnerable;
    MaliciousRecipient public malicious;

    function setUp() public {
        dosVulnerable = new DoSVulnerable();
        malicious = new MaliciousRecipient();

        // Add normal recipients
        dosVulnerable.addRecipient(address(0x1234));
        dosVulnerable.addRecipient(address(0x5678));

        // Add the malicious recipient
        dosVulnerable.addRecipient(address(malicious));
    }

    function testDoSAttack() public {
        // Attempt to distribute funds
        uint256 initialBalance = address(dosVulnerable).balance;
        vm.deal(address(dosVulnerable), 10 ether); // Fund the contract

        vm.expectRevert("Transfer failed");
        dosVulnerable.distributeFunds{value: 10 ether}();

        // Assert that no funds were distributed
        uint256 finalBalance = address(dosVulnerable).balance;
        assertEq(initialBalance, finalBalance);
    }
}
